// Generated by CoffeeScript 1.7.1

/*
wbt.rotator.js v1.0.3

Licensed under the MIT license.
http://opensource.org/licenses/mit-license.php

Dependencies: jQuery 1.7+

Basic usage:
$(".any-selector").wbtRotator({
frameSrc: "path/template/{{30}}.jpg"
});

For more instructions and examples, please visit http://wbtech.pro/blog/articles/rotator/

Copyright 2012, WBTech
http://wbtech.pro/
 */

(function() {
  (function($) {
    var WBTRotator;
    WBTRotator = function($el, params) {
      this.cfg = $.extend({}, WBTRotator.prototype.defaults, params);
      this.$el = $el.addClass("wbt-rotator");
      this.$frames = $();
      this.$frameCurrent = $();
      this.frameCurrent = this.cfg.frameFirst;
      this.frameCount = 0;
      this.frameLoadedCount = 0;
      this.frameSize = {
        width: 0,
        height: 0
      };
      this.pointerPressed = false;
      this.pointerPosition = {
        x: 0,
        y: 0
      };
      if (!this.$el.length) {
        return $.wbtError("Specify non empty rotator placeholder.");
      }
      if (!this.cfg.frameSrc || this.cfg.frameSrc.length === 0) {
        return $.wbtError("Specify 'frameSrc' in $().wbtRotator() call.");
      }
      if (typeof this.cfg.frameSrc === "string") {
        this.getFrameSrc();
      }
      this.frameCount = this.cfg.frameSrc.length;
      if (this.cfg.showLoader) {
        this.$loader = $("<span>&#9654;</span>").attr({
          "class": "wbt-rotator-loader"
        }).appendTo(this.$el);
      }
      if (!this.cfg.frameCover) {
        this.cfg.frameCover = this.cfg.frameSrc[0];
      }
      this.loadCover();
      if (this.cfg.rotateManual) {
        if (this.cfg.cursor === "arrows") {
          if (this.cfg.invertAxes) {
            this.$el.addClass("wbt-rotator__vertical");
          } else {
            this.$el.addClass("wbt-rotator__horizontal");
          }
        } else {
          if (this.cfg.cursor === "grab") {
            this.$el.addClass("wbt-rotator__grab");
          }
        }
      }
      if (this.cfg.autoLoad) {
        this.loadImages();
      }
      this.$el.on("click.wbt-rotator", $.proxy(this.loadImages, this));
    };
    WBTRotator.prototype.defaults = {
      showLoader: true,
      frameCover: "",
      frameSrc: "",
      frameFirst: 0,
      leadingZero: true,
      autoLoad: true,
      rotateAuto: false,
      rotateAutoSpeed: 100,
      rotateManual: true,
      invertAxes: false,
      invertMouse: false,
      invertAutoRotate: false,
      enableMouseWheel: true,
      cursor: "arrows"
    };
    WBTRotator.prototype.registerEvents = function() {
      this.$el[0].addEventListener(($.wbtIsTouch() ? "touchstart" : "mousedown"), $.proxy(this.onPointerDown, this));
      document.addEventListener(($.wbtIsTouch() ? "touchend" : "mouseup"), $.proxy(this.onPointerUp, this));
      document.addEventListener(($.wbtIsTouch() ? "touchmove" : "mousemove"), $.proxy(this.onPointerMove, this));
      if (this.cfg.enableMouseWheel) {
        this.$el.on("mousewheel DOMMouseScroll", $.proxy(this.onScroll, this));
      }
      if (this.cfg.rotateAuto) {
        this.$el.on("mouseenter", $.proxy(this.onPointerEnter, this));
        this.$el.on("mouseleave", $.proxy(this.onPointerLeave, this));
      }
    };
    WBTRotator.prototype.getCoverSrc = function() {};
    WBTRotator.prototype.getFrameSrc = function() {
      var frameCount, frameCountLength, frameIndex, frameIndexLength, frameSrc, i;
      frameCount = parseInt(this.cfg.frameSrc.replace(/.*{{|}}.*/g, ""));
      frameCountLength = ("" + frameCount).length;
      frameIndex = 0;
      frameIndexLength = 0;
      frameSrc = [];
      i = 0;
      while (i < frameCount) {
        frameIndex = i;
        if (this.cfg.leadingZero) {
          while (frameIndexLength = ("" + frameIndex).length < frameCountLength) {
            frameIndex = "0" + frameIndex;
          }
        }
        frameSrc.push(this.cfg.frameSrc.replace(/{{.*}}/, frameIndex));
        i++;
      }
      this.cfg.frameSrc = frameSrc;
    };
    WBTRotator.prototype.loadCover = function() {
      var self;
      self = this;
      this.$cover = $("<img />").attr({
        "class": "wbt-rotator-cover",
        src: this.cfg.frameCover,
        alt: ""
      }).appendTo(this.$el).on("load", function() {
        self.frameSize = {
          width: self.$cover.width(),
          height: self.$cover.height()
        };
        self.$el.width(self.frameSize.width).height(self.frameSize.height);
      });
    };
    WBTRotator.prototype.loadImages = function() {
      var i, self;
      this.$el.off("click.wbt-rotator").addClass("wbt-rotator__loading");
      self = this;
      i = 0;
      while (i < this.frameCount) {
        $("<img />").attr({
          "class": "wbt-rotator-image",
          src: this.cfg.frameSrc[i],
          alt: ""
        }).appendTo(this.$el).on("load", function(e) {
          var $this;
          self.frameLoadedCount++;
          self.loadImagesAnimation();
          if (self.frameLoadedCount === 1 && !self.frameCover) {
            $this = $(this);
            self.frameSize = {
              width: $this.width(),
              height: $this.height()
            };
            self.$el.width(self.frameSize.width).height(self.frameSize.height);
          }
          if (self.frameLoadedCount === self.frameCount) {
            self.loadImagesComplete();
          }
        });
        i++;
      }
    };
    WBTRotator.prototype.loadImagesAnimation = function() {};
    WBTRotator.prototype.loadImagesComplete = function() {
      this.$el.removeClass("wbt-rotator__loading").addClass("wbt-rotator__loaded");
      this.$frames = this.$el.children(".wbt-rotator-image");
      this.$frameCurrent = this.$frames.eq(this.frameCurrent).addClass("wbt-rotator-image__active");
      this.registerEvents();
      if (this.cfg.rotateAuto) {
        this.startAutoRotate();
      }
    };
    WBTRotator.prototype.onPointerDown = function(e) {
      if (e.preventDefault) {
        e.preventDefault();
      } else {
        e.returnValue = false;
      }
      this.$el.addClass("wbt-rotator__active");
      this.pointerPressed = true && this.cfg.rotateManual;
      this.pointerPosition.x = e.pageX;
      this.pointerPosition.y = e.pageY;
    };
    WBTRotator.prototype.onPointerUp = function() {
      if (this.pointerPressed) {
        this.$el.removeClass("wbt-rotator__active");
        this.pointerPressed = false;
        this.frameCurrent = this.$el.children(".wbt-rotator-image").index(this.$frameCurrent);
      }
    };
    WBTRotator.prototype.onPointerMove = function(e) {
      var delta;
      if (this.pointerPressed) {
        if (e.preventDefault) {
          e.preventDefault();
        } else {
          e.returnValue = false;
        }
        delta = void 0;
        if (this.cfg.invertAxes) {
          delta = e.pageY - this.pointerPosition.y;
        } else {
          delta = e.pageX - this.pointerPosition.x;
        }
        delta = Math.floor(delta * this.frameCount / (this.invertAxes ? this.frameSize.height : this.frameSize.width));
        if (this.cfg.invertMouse) {
          delta = this.frameCurrent - delta;
        } else {
          delta = this.frameCurrent + delta;
        }
        this.changeFrame(delta);
      }
    };
    WBTRotator.prototype.onPointerEnter = function() {};
    WBTRotator.prototype.onPointerLeave = function() {};
    WBTRotator.prototype.onScroll = function(e, delta) {
      var scrollUp;
      if (this.cfg.rotateManual) {
        e.preventDefault();
        scrollUp = void 0;
        if (undefined !== e.wheelDelta) {
          scrollUp = e.wheelDelta > 0;
        } else if (undefined !== e.detail) {
          scrollUp = e.detail > 0;
        } else {
          scrollUp = e.originalEvent.wheelDelta > 0;
        }
        this.changeFrame((scrollUp ? ++this.frameCurrent : --this.frameCurrent));
      }
    };
    WBTRotator.prototype.changeFrame = function(newIndex) {
      newIndex += this.frameCount;
      newIndex %= this.frameCount;
      this.$frameCurrent.removeClass("wbt-rotator-image__active");
      this.$frameCurrent = this.$frames.eq(newIndex);
      this.$frameCurrent.addClass("wbt-rotator-image__active");
    };
    WBTRotator.prototype.startAutoRotate = function() {
      var self;
      self = this;
      setInterval((function() {
        if (!self.pointerPressed) {
          self.changeFrame((self.cfg.invertAutoRotate ? ++self.frameCurrent : --self.frameCurrent));
        }
      }), this.cfg.rotateAutoSpeed);
    };
    WBTRotator.prototype.stopAutoRotate = function() {};
    $.wbtError = function(error) {
      if (window.console && window.console.error) {
        console.error(error);
      }
    };
    $.wbtIsTouch = function() {
      if (("ontouchstart" in window) || (window.DocumentTouch && document instanceof DocumentTouch)) {
        return true;
      } else {
        return false;
      }
    };
    $.fn.wbtRotator = function(params) {
      return new WBTRotator(this, params);
    };
  })(jQuery);

}).call(this);
